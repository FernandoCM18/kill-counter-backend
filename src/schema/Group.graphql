type Group {
  id: ID!
  name: String!
  description: String
  author: User!
  users: [User]
  usersKill: [UserGroupKill]
  createdAt: Date
  updatedAt: Date
}

type UserGroupKill {
  user: User
  kills: Int
}

extend type Query {
  groups: [Group]
  group(id: ID, name: String): Group
}

type Mutation {
  createGroup(groupInput: CreateGroupInput): Group
  updateGroup(groupInput: UpdateGroupInput): Group
  deleteGroup(idGroupInput: ID!): Group
  addUserToGroup(addUserInput: AddUserToGroupInput!): Group
  deleteUserToGroup(deleteUserInput: DeleteUserToGroupInput!): Group
}

input CreateGroupInput {
  name: String!
  description: String
}

input UpdateGroupInput {
  id: ID!
  name: String
  description: String
}

input AddUserToGroupInput {
  idUser: ID!
  idGroup: ID!
}

input DeleteUserToGroupInput {
  idUser: ID!
  idGroup: ID!
}